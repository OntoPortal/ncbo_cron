#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'

# do not send notifications to ontology owners when running this script
LinkedData.settings.enable_notifications = false

require 'optparse'
options = {}
opt_parser = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  #opts.banner = "Usage: ncbo_ontology_index [options]"
  options[:ontology] = false
  opts.on('-o', '--ontology ONTOLOGY_ACRONYM', 'Ontology acronym to delete (required).') do |acronym|
    puts "Deleting ontology: #{acronym}"
    options[:ontology] = acronym
  end
  options[:logfile] = "deletions.log"
  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is 'deletions.log')" ) do |filename|
    options[:logfile] = filename
  end
  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
# Parse the command-line. The 'parse' method simply parses ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for the options.
opt_parser.parse!
unless options[:ontology]
  puts opt_parser.help
  exit(1)
end

begin
  logger = Logger.new(options[:logfile])
  puts "Deletion details are logged to #{options[:logfile]}"
  ont = LinkedData::Models::Ontology.find(options[:ontology]).first
  if ont.nil?
    msg = "Quitting, ontology not found: #{options[:ontology]}"
    logger.error(msg)
    puts msg
    exit(1)
  end
  ont.delete
  # deleting ontology from report
  NcboCron::Models::OntologiesReport.new(logger).delete_ontologies_from_report([options[:ontology]])
  logger.info("Ontology deleted: #{options[:ontology]}")
rescue Exception => e
  msg = "Failed, exception: #{e.to_json}."
  logger.error(msg)
  puts msg
  exit(1)
end


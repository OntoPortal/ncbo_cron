#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'

# do not send notifications to ontology owners when running this script
LinkedData.settings.enable_notifications = false


platform = "local"
if LinkedData.settings.goo_host.include? "stage"
  platform = "stage"
elsif LinkedData.settings.goo_host.include? "prod"
  platform = "prod"
end
puts "Running on #{platform} platform"

require 'optparse'
options = {}
opt_parser = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  #opts.banner = "Usage: ncbo_ontology_metrics [options]"

  options[:ontologies] = []
  opts.on('-a', '--all-ontologies', 'Generate metrics for all ontologies (this or -o option required).') do
    LinkedData::Models::Ontology.all.each  do |ont|
      ont.bring(:acronym)
      options[:ontologies].push(ont.acronym)
    end
    options[:all] = true
  end

  opts.on('-o', '--ontologies ACRONYM1,ACRONYM2,ACRONYM3', 'Comma-separated list of ontologies to generate metrics for (this or -a option required).') do |acronyms|
    options[:ontologies] = acronyms.split(",").map {|o| o.strip}
  end

  options[:logfile] = STDOUT
  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is STDOUT)" ) do |filename|
    options[:logfile] = filename
  end

  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
# Parse the command-line. The 'parse' method simply parses ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for the options.
opt_parser.parse!
unless options[:ontologies]
  puts opt_parser.help
  exit(1)
end

def generate_metrics_for_ontology(finished_ontologies, acronym, logger)
  begin
    ont = LinkedData::Models::Ontology.find(acronym).first
    if ont.nil?
      raise "Ontology not found: #{acronym}"
    end
    logger.info("Retrieved ontology: #{acronym}")

    sub = ont.latest_submission(status: :rdf)
    if sub.nil?
      raise "Cannot find latest submission with 'RDF' parsed status for ontology: #{acronym}"
    end
    NcboCron::Models::OntologySubmissionParser.new.process_submission(logger, sub.id.to_s, {process_rdf: false,
                                                                      index_search: false, index_commit: false,
                                                                      run_metrics: true, reasoning: false, diff: false})
    finished_ontologies << acronym
  rescue Exception => e
    msg = "Exception: #{e.to_json}"
    puts msg
    logger.error(msg)
  end
end

begin
  logger = Logger.new(options[:logfile])
  puts "Processing details are logged to #{options[:logfile] == STDOUT ? "STDOUT" : options[:logfile]}"
  msg = ""

  if options[:all]
    msg = "Generating metrics for all ontologies"
  else
    msg = "Generating metrics for ontologies: #{options[:ontologies]}"
  end
  puts msg
  logger.info(msg)

  finished_ontologies = []
  remaining_ontologies = options[:ontologies].length

  time = Benchmark.realtime do
    logger.info("There is a total of #{options[:ontologies].length} ontolog#{options[:ontologies].length > 1 ? "ies" : "y"} to generate metrics for")

    options[:ontologies].each do |acronym|
      generate_metrics_for_ontology(finished_ontologies, acronym, logger)
      remaining_ontologies -= 1
      logger.info("There is a total of #{remaining_ontologies} ontolog#{remaining_ontologies > 1 ? "ies" : "y"} remaining out of #{options[:ontologies].length} ontologies") if (remaining_ontologies > 0)
    end
  end

  if options[:all]
    msg = "Completed generating metrics for all ontologies in #{(time/60).round(1)} minutes."
  else
    msg = "Completed generating metrics for ontologies: #{finished_ontologies} in #{(time/60).round(1)} minutes."
  end
  puts msg
  logger.info(msg)
rescue Exception => e
  msg = "Failed metrics generation with exception: #{e.to_json}"
  logger.error(msg)
  puts msg
  exit(1)
end
